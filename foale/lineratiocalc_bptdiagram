#!/usr/bin/env python

import matplotlib.pyplot as plt
import foale.mnsa
import numpy as np

# Initialize the convenience object

p_IFU = '8143-6101'

m = foale.mnsa.MNSA(plateifu = '8143-6101', dr17 = True)

# Read in the cube's FITS file
m.read_cube()
wave = m.cube['WAVE'].read()
flux = m.cube['FLUX'].read()

# Show one of the spectra in a pixel
spaxel_flux = flux[:, 24, 24]
#plt.plot(wave, spaxel_flux)
#plt.xlabel('Wavelength (Angstrom)')
#plt.ylabel('Flux ($10^{-17}$ erg/cm$^2$/s/A)')
#plt.title(p_IFU)
#plt.show()

# Read in the maps FITS file
m.read_maps()

# Read in the emission line measurements (Gaussian fit)
# This is a big 3D array, with one 2D image per line.
gflux = m.maps['EMLINE_GFLUX'].read()

# We have to pick out the right line. The MNSA object
# builds a little dictionary to help.
#print(m.lineindx.keys())

halpha_indx = m.lineindx['Ha-6564']
hbeta_indx = m.lineindx['Hb-4862']
SII_6718_indx = m.lineindx['SII-6718']
SII_6732_indx = m.lineindx['SII-6732']
OI_indx = m.lineindx['OI-6302']
OIII_indx = m.lineindx['OIII-5008']
NII_indx = m.lineindx['NII-6585']

# DAP Maps for Emission Lines of Interest
halpha = gflux[halpha_indx, :, :]
#plt.imshow(halpha, origin='lower', cmap='inferno')
#plt.title('H-Alpha DAP')
#plt.colorbar(label = 'Flux')
#plt.show()

hbeta = gflux[hbeta_indx, :, :]
#plt.imshow(hbeta, origin='lower', cmap='inferno')
#plt.title('H-Beta DAP')
#plt.show()

SII_6718 = gflux[SII_6718_indx, :, :]
#plt.imshow(SII, origin='lower', cmap='inferno')
#plt.title('SII-6718 DAP')
#plt.colorbar(label = 'Flux')
#plt.show()

SII_6732 = gflux[SII_6732_indx, :, :]
#plt.imshow(SII_2, origin='lower', cmap='inferno')
#plt.title('SII-6732 DAP')
#plt.colorbar(label = 'Flux')
#plt.show()

OI = gflux[OI_indx, :, :]
#plt.imshow(OI, origin='lower', cmap='inferno')
#plt.title('OI DAP')
#plt.colorbar(label = 'Flux')
#plt.show()

OIII = gflux[OIII_indx, :, :]
#plt.imshow(OIII, origin='lower', cmap='inferno')
#plt.title('OIII DAP')
#plt.colorbar(label = 'Flux')
#plt.show()

NII = gflux[NII_indx, :, :]
#plt.imshow(NII, origin='lower', cmap='inferno')
#plt.title('NII DAP')
#plt.colorbar(label = 'Flux')
#plt.show()

# masked DAP maps
gfluxmask = m.maps['EMLINE_GFLUX_MASK'].read()
halpha_mask = np.ma.array(halpha, mask = gfluxmask[halpha_indx,:,:])
#plt.imshow(halpha_mask, origin = 'lower', cmap = 'inferno')
#plt.title('Masked H-Alpha DAP')
#plt.colorbar(label ='Flux')
#plt.show()

hbeta_mask = np.ma.array(hbeta, mask = gfluxmask[hbeta_indx,:,:])
SII_6718_mask = np.ma.array(SII_6718, mask = gfluxmask[SII_6718_indx,:,:])
SII_6732_mask = np.ma.array(SII_6732, mask = gfluxmask[SII_6732_indx,:,:])
OI_mask = np.ma.array(OI, mask = gfluxmask[OI_indx,:,:])
OIII_mask = np.ma.array(OIII, mask = gfluxmask[OIII_indx,:,:])
NII_mask = np.ma.array(NII, mask = gfluxmask[NII_indx,:,:])

# don't want divide by zero errors when we calculate line ratios; make a mask that is comprised of good pixels AND exludes flux values less than or equal to zero: 
# bit number = 0 --> no coverage in cube
m = (halpha_mask == 0) | (hbeta_mask == 0 ) | (SII_6718_mask == 0) |(SII_6732_mask ==0) | (OI_mask == 0) |(OIII_mask == 0) | (NII_mask == 0) |(halpha <= 0) | (hbeta <= 0) |(SII_6718 <= 0 ) | (SII_6732 <= 0 ) |(OI <= 0) |(OIII <= 0) |(NII <= 0)

# apply mask to h-alpha line emission flux measurement array
ma_nz_halpha = np.ma.array(halpha, mask = m)
#plt.imshow(ma_nz_halpha, origin = 'lower', cmap = 'inferno')
#plt.title('Masked H-Alpha (Flux Emission > 0)')
#plt.colorbar(label = 'Flux')
#plt.show()

ma_nz_hbeta = np.ma.array(hbeta, mask = m)
ma_nz_SII_6718 = np.ma.array(SII_6718, mask = m)
ma_nz_SII_6732 = np.ma.array(SII_6732, mask = m)
ma_nz_OI = np.ma.array(OI, mask = m)
ma_nz_OIII = np.ma.array(OIII, mask = m)
ma_nz_NII = np.ma.array(NII, mask = m)

# array of the sum of the SII doublet
ma_nz_SII =  ma_nz_SII_6718 + ma_nz_SII_6732

# BPT Diagram

line_ratio1 = np.log10(ma_nz_SII/ma_nz_halpha)
line_ratio2= np.log10(ma_nz_OIII/ma_nz_hbeta)

# Kewley (2006) lines
# first create a linspace of points to plot the classification lines
x_SII_sf = np.linspace(-1.5,0.065)
x_SII_sy_liner = np.linspace(-0.3,1.5)

def starformation_SII(log_SII_Ha):
    """Star formation classification line for log([SII]/Ha)"""
    return 0.72/(log_SII_Ha - 0.32) + 1.30

def seyfert_liner_SII(log_SII_Ha):
    """Seyfert and LINER classification line for log([SII]/Ha)"""
    return 1.89 * log_SII_Ha +0.76

# plot diagram
plt.figure(figsize = (5,5))
plt.scatter(line_ratio1, line_ratio2, marker ='.', linestyle = 'None')
plt.plot(x_SII_sf, starformation_SII(x_SII_sf), '-k')
plt.plot(x_SII_sy_liner, seyfert_liner_SII(x_SII_sy_liner), '--k')
plt.text(-1,1.65, 'Seyfert', fontsize = 12)
plt.text(-1.35,-0.25, 'Star Formation', fontsize = 12)
plt.text(0.55, 0.225, 'LINER', fontsize = 12)

plt.title('BPT Diagram for Galaxy 1-72322')
plt.xlabel(r'log([SII]/H${\alpha}$)')
plt.ylabel(r'log([OIII]/H${\beta}$)')
plt.xlim(-1.5,1.0)
plt.ylim(-1.5,2.0)
plt.tight_layout()
plt.show()

# central flux

# Read in the PSF from the cube's FITS file
m.read_maps()
PSF = m.cub['RPSF'].read()
# Read in the cube's FITS file
m.read_cube()
wave = m.cube['WAVE'].read()
flux = m.cube['FLUX'].read()


halpha_cf = (ma_nz_halpha*PSF).sum() / (PSF**2).sum()
#hbeta_cf = (ma_nz_hbeta*PSF).sum() / (PSF**2).sum()
#SII_cf = (ma_nz_SII*PSF).sum() / (PSF**2).sum()
#OI_cf = (ma_nz_OI*PSF).sum() / (PSF**2).sum()
#OIII_cf = (ma_nz_OIII*PSF).sum() / (PSF**2).sum()
#NII_cf = (ma_nz_NII*PSF).sum() / (PSF**2).sum()

#plt.savefig('/uufs/chpc.utah.edu/common/home/u6044257/Desktop/Belfiore BPT Diagrams/final_off/BPT_1-72322.png', overwrite = True)
